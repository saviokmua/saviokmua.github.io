<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on RubyDev</title>
    <link>http://localhost:1313/tags/rails/</link>
    <description>Recent content in Rails on RubyDev</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conditional Routing in Rails: Cleanly Split Controllers by Query Parameter</title>
      <link>http://localhost:1313/rails-conditional-routing-constraints/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rails-conditional-routing-constraints/</guid>
      <description>&lt;h1 id=&#34;conditional-routing-in-ruby-on-rails-using-custom-constraints&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#conditional-routing-in-ruby-on-rails-using-custom-constraints&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Conditional Routing in Ruby on Rails Using Custom Constraints&lt;/h1&gt;&lt;p&gt;In complex Ruby on Rails applications, it&amp;rsquo;s common to route requests based on dynamic conditions, such as the value of a query parameter. One powerful way to handle such cases is to use &lt;strong&gt;custom routing constraints&lt;/strong&gt;. This article demonstrates how to route the same endpoint to different controllers based on the &lt;code&gt;subject_type&lt;/code&gt; parameter.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#problem&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Suppose we want to handle updates to details of various animal types—dogs, cats, and mice—through a single endpoint like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hidden Performance Trap in Rails: Avoid nil in .where(id: [...])</title>
      <link>http://localhost:1313/rails-where-id-nil-performance-trap/</link>
      <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rails-where-id-nil-performance-trap/</guid>
      <description>&lt;h1 id=&#34;-why-including-nil-in-whereid--can-severely-impact-postgresql-performance&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#-why-including-nil-in-whereid--can-severely-impact-postgresql-performance&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;⚠️ Why Including &lt;code&gt;nil&lt;/code&gt; in &lt;code&gt;.where(id: [...])&lt;/code&gt; Can Severely Impact PostgreSQL Performance&lt;/h1&gt;&lt;p&gt;When writing queries like:&lt;/p&gt;&#xA;&lt;div class=&#34;code-block highlight is-open show-line-numbers  tw-group tw-my-2&#34;&gt;&#xA;  &lt;div class=&#34;&#xA;    &#xA;    tw-flex &#xA;    tw-flex-row&#xA;    tw-flex-1 &#xA;    tw-justify-between &#xA;    tw-w-full tw-bg-bgColor-secondary&#xA;    &#34;&gt;      &#xA;    &lt;button &#xA;      class=&#34;&#xA;        code-block-button&#xA;        tw-mx-2 &#xA;        tw-flex&#xA;        tw-flex-row&#xA;        tw-flex-1&#34;&#xA;      aria-hidden=&#34;true&#34;&gt;&#xA;          &lt;div class=&#34;group-[.is-open]:tw-rotate-90 tw-transition-[transform] tw-duration-500 tw-ease-in-out print:!tw-hidden tw-w-min tw-h-min tw-my-1 tw-mx-1&#34;&gt;&lt;svg class=&#34;icon&#34;&#xA;    xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 320 512&#34;&gt;&lt;!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --&gt;&lt;path d=&#34;M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z&#34;/&gt;&lt;/svg&gt;&lt;/div&gt;&#xA;          &lt;p class=&#34;tw-select-none !tw-my-1&#34;&gt;ruby&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Add RuboCop Checking for Your Ruby Project in GitLab CI</title>
      <link>http://localhost:1313/how-to-add-rubocop-checking-for-your-ruby-project-for-gitlab-ci/</link>
      <pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/how-to-add-rubocop-checking-for-your-ruby-project-for-gitlab-ci/</guid>
      <description>&lt;h1 id=&#34;how-to-add-rubocop-checking-for-your-ruby-project-in-gitlab-ci&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#how-to-add-rubocop-checking-for-your-ruby-project-in-gitlab-ci&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;How to Add RuboCop Checking for Your Ruby Project in GitLab CI&lt;/h1&gt;&lt;p&gt;RuboCop is a Ruby static code analyzer and formatter that helps maintain consistent code style and catch potential issues. Integrating it into your GitLab CI pipeline ensures that all code changes meet your project&amp;rsquo;s quality standards before merging.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-rubocop&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#what-is-rubocop&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;What is RuboCop?&lt;/h2&gt;&lt;p&gt;RuboCop is a Ruby gem that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Enforces Ruby style guide conventions&lt;/li&gt;&#xA;&lt;li&gt;Detects potential bugs and code smells&lt;/li&gt;&#xA;&lt;li&gt;Provides automatic code formatting&lt;/li&gt;&#xA;&lt;li&gt;Integrates with popular editors and CI systems&lt;/li&gt;&#xA;&lt;li&gt;Supports custom rules and configurations&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34; class=&#34;headerLink&#34;&gt;&#xA;    &lt;a href=&#34;#prerequisites&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;Before setting up RuboCop in GitLab CI, ensure you have:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
